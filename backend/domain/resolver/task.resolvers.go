package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"app/domain/service"
	"app/gen/gqlgen"
	"context"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input gqlgen.CreateTaskInput) (*gqlgen.CreateTaskPayload, error) {
	var task *gqlgen.Task
	{
		out, err := r.taskService.Create(ctx, service.TaskServiceCreateInput{
			Title: input.Title,
		})
		if err != nil {
			return nil, err
		}

		task = out.Task
	}

	return &gqlgen.CreateTaskPayload{
		ClientMutationId: input.ClientMutationId,
		Task:             task,
	}, nil
}

// CompleteTask is the resolver for the completeTask field.
func (r *mutationResolver) CompleteTask(ctx context.Context, input gqlgen.CompleteTaskInput) (*gqlgen.CompleteTaskPayload, error) {
	var task *gqlgen.Task
	{
		out, err := r.taskService.Complete(ctx, service.TaskServiceCompleteInput{
			ID: input.Id,
		})
		if err != nil {
			return nil, err
		}

		task = out.Task
	}

	return &gqlgen.CompleteTaskPayload{
		ClientMutationId: input.ClientMutationId,
		Task:             task,
	}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, status *gqlgen.TaskStatus, after *string, first int32) (*gqlgen.TaskConnection, error) {
	var taskConnection *gqlgen.TaskConnection
	{
		out, err := r.taskService.List(ctx, service.TaskServiceListInput{
			Status: status,
			After:  after,
			First:  first,
		})
		if err != nil {
			return nil, err
		}

		taskConnection = out.TaskConnection
	}

	return taskConnection, nil
}
