// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetId() string
}

type CompleteTaskInput struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
	Id               string  `json:"id"`
}

type CompleteTaskPayload struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
	Task             *Task   `json:"task,omitempty"`
}

type CreateTaskInput struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
	Title            string  `json:"title"`
}

type CreateTaskPayload struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
	Task             *Task   `json:"task"`
}

type Mutation struct {
}

type NoopInput struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
}

type NoopPayload struct {
	ClientMutationId *string `json:"clientMutationId,omitempty"`
}

type PageInfo struct {
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Query struct {
}

type Task struct {
	Id     string     `json:"id"`
	Title  string     `json:"title"`
	Status TaskStatus `json:"status"`
}

func (Task) IsNode()            {}
func (this Task) GetId() string { return this.Id }

type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges"`
	Nodes      []*Task     `json:"nodes"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int64       `json:"totalCount"`
}

type TaskEdge struct {
	Cursor string `json:"cursor"`
	Node   *Task  `json:"node"`
}

type TaskStatus string

const (
	TaskStatusUncompleted TaskStatus = "UNCOMPLETED"
	TaskStatusCompleted   TaskStatus = "COMPLETED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusUncompleted,
	TaskStatusCompleted,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusUncompleted, TaskStatusCompleted:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
