// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package mysql

import (
	"context"

	timeutil "github.com/m0t0k1ch1-go/timeutil/v4"
)

const completeTask = `-- name: CompleteTask :exec
UPDATE task SET status = 'COMPLETED', updated_at = ? WHERE id = ?
`

type CompleteTaskParams struct {
	UpdatedAt timeutil.Timestamp
	ID        uint64
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, completeTask, arg.UpdatedAt, arg.ID)
	return err
}

const createTask = `-- name: CreateTask :execlastid
INSERT INTO task (title, updated_at, created_at) VALUES (?, ?, ?)
`

type CreateTaskParams struct {
	Title     string
	UpdatedAt timeutil.Timestamp
	CreatedAt timeutil.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTask, arg.Title, arg.UpdatedAt, arg.CreatedAt)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getTask = `-- name: GetTask :one
SELECT id, title, status, updated_at, created_at FROM task WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskForUpdate = `-- name: GetTaskForUpdate :one
SELECT id, title, status, updated_at, created_at FROM task WHERE id = ? FOR UPDATE
`

func (q *Queries) GetTaskForUpdate(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskForUpdate, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listFirstTasks = `-- name: ListFirstTasks :many
SELECT id, title, status, updated_at, created_at FROM task ORDER BY id LIMIT ?
`

func (q *Queries) ListFirstTasks(ctx context.Context, limit int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listFirstTasks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFirstTasksAfterCursor = `-- name: ListFirstTasksAfterCursor :many
SELECT id, title, status, updated_at, created_at FROM task WHERE id > ? ORDER BY id LIMIT ?
`

type ListFirstTasksAfterCursorParams struct {
	ID    uint64
	Limit int32
}

func (q *Queries) ListFirstTasksAfterCursor(ctx context.Context, arg ListFirstTasksAfterCursorParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listFirstTasksAfterCursor, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFirstTasksAfterCursorByStatus = `-- name: ListFirstTasksAfterCursorByStatus :many
SELECT id, title, status, updated_at, created_at FROM task WHERE status = ? AND id > ? ORDER BY id LIMIT ?
`

type ListFirstTasksAfterCursorByStatusParams struct {
	Status TaskStatus
	ID     uint64
	Limit  int32
}

func (q *Queries) ListFirstTasksAfterCursorByStatus(ctx context.Context, arg ListFirstTasksAfterCursorByStatusParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listFirstTasksAfterCursorByStatus, arg.Status, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFirstTasksByStatus = `-- name: ListFirstTasksByStatus :many
SELECT id, title, status, updated_at, created_at FROM task WHERE status = ? ORDER BY id LIMIT ?
`

type ListFirstTasksByStatusParams struct {
	Status TaskStatus
	Limit  int32
}

func (q *Queries) ListFirstTasksByStatus(ctx context.Context, arg ListFirstTasksByStatusParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listFirstTasksByStatus, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
