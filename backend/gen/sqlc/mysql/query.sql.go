// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package mysql

import (
	"context"
)

const createTask = `-- name: CreateTask :execlastid
INSERT INTO ` + "`" + `tasks` + "`" + ` (` + "`" + `title` + "`" + `) VALUES (?)
`

func (q *Queries) CreateTask(ctx context.Context, title string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTask, title)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM ` + "`" + `tasks` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, is_completed, updated_at, created_at FROM ` + "`" + `tasks` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) GetTask(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsCompleted,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskForUpdate = `-- name: GetTaskForUpdate :one
SELECT id, title, is_completed, updated_at, created_at FROM ` + "`" + `tasks` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ? FOR UPDATE
`

func (q *Queries) GetTaskForUpdate(ctx context.Context, id uint64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskForUpdate, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsCompleted,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, is_completed, updated_at, created_at FROM ` + "`" + `tasks` + "`" + ` ORDER BY ` + "`" + `id` + "`" + ` DESC
`

func (q *Queries) ListTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsCompleted,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE ` + "`" + `tasks` + "`" + ` SET ` + "`" + `title` + "`" + ` = ?, ` + "`" + `is_completed` + "`" + ` = ?, ` + "`" + `updated_at` + "`" + ` = UNIX_TIMESTAMP(NOW()) WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateTaskParams struct {
	Title       string
	IsCompleted bool
	ID          uint64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Title, arg.IsCompleted, arg.ID)
	return err
}
