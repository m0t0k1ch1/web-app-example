// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app/v1/app.proto

package appv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/m0t0k1ch1/web-app-sample/backend/gen/buf/app/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AppServiceName is the fully-qualified name of the AppService service.
	AppServiceName = "app.v1.AppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppServicePingProcedure is the fully-qualified name of the AppService's Ping RPC.
	AppServicePingProcedure = "/app.v1.AppService/Ping"
	// AppServiceCreateTaskProcedure is the fully-qualified name of the AppService's CreateTask RPC.
	AppServiceCreateTaskProcedure = "/app.v1.AppService/CreateTask"
	// AppServiceGetTaskProcedure is the fully-qualified name of the AppService's GetTask RPC.
	AppServiceGetTaskProcedure = "/app.v1.AppService/GetTask"
	// AppServiceListTasksProcedure is the fully-qualified name of the AppService's ListTasks RPC.
	AppServiceListTasksProcedure = "/app.v1.AppService/ListTasks"
	// AppServiceUpdateTaskProcedure is the fully-qualified name of the AppService's UpdateTask RPC.
	AppServiceUpdateTaskProcedure = "/app.v1.AppService/UpdateTask"
	// AppServiceMakeTaskCompleteProcedure is the fully-qualified name of the AppService's
	// MakeTaskComplete RPC.
	AppServiceMakeTaskCompleteProcedure = "/app.v1.AppService/MakeTaskComplete"
	// AppServiceMakeTaskIncompleteProcedure is the fully-qualified name of the AppService's
	// MakeTaskIncomplete RPC.
	AppServiceMakeTaskIncompleteProcedure = "/app.v1.AppService/MakeTaskIncomplete"
	// AppServiceDeleteTaskProcedure is the fully-qualified name of the AppService's DeleteTask RPC.
	AppServiceDeleteTaskProcedure = "/app.v1.AppService/DeleteTask"
)

// AppServiceClient is a client for the app.v1.AppService service.
type AppServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	MakeTaskComplete(context.Context, *connect.Request[v1.MakeTaskCompleteRequest]) (*connect.Response[v1.MakeTaskCompleteResponse], error)
	MakeTaskIncomplete(context.Context, *connect.Request[v1.MakeTaskIncompleteRequest]) (*connect.Response[v1.MakeTaskIncompleteResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewAppServiceClient constructs a client for the app.v1.AppService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &appServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+AppServicePingProcedure,
			opts...,
		),
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+AppServiceCreateTaskProcedure,
			opts...,
		),
		getTask: connect.NewClient[v1.GetTaskRequest, v1.GetTaskResponse](
			httpClient,
			baseURL+AppServiceGetTaskProcedure,
			opts...,
		),
		listTasks: connect.NewClient[v1.ListTasksRequest, v1.ListTasksResponse](
			httpClient,
			baseURL+AppServiceListTasksProcedure,
			opts...,
		),
		updateTask: connect.NewClient[v1.UpdateTaskRequest, v1.UpdateTaskResponse](
			httpClient,
			baseURL+AppServiceUpdateTaskProcedure,
			opts...,
		),
		makeTaskComplete: connect.NewClient[v1.MakeTaskCompleteRequest, v1.MakeTaskCompleteResponse](
			httpClient,
			baseURL+AppServiceMakeTaskCompleteProcedure,
			opts...,
		),
		makeTaskIncomplete: connect.NewClient[v1.MakeTaskIncompleteRequest, v1.MakeTaskIncompleteResponse](
			httpClient,
			baseURL+AppServiceMakeTaskIncompleteProcedure,
			opts...,
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+AppServiceDeleteTaskProcedure,
			opts...,
		),
	}
}

// appServiceClient implements AppServiceClient.
type appServiceClient struct {
	ping               *connect.Client[v1.PingRequest, v1.PingResponse]
	createTask         *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	getTask            *connect.Client[v1.GetTaskRequest, v1.GetTaskResponse]
	listTasks          *connect.Client[v1.ListTasksRequest, v1.ListTasksResponse]
	updateTask         *connect.Client[v1.UpdateTaskRequest, v1.UpdateTaskResponse]
	makeTaskComplete   *connect.Client[v1.MakeTaskCompleteRequest, v1.MakeTaskCompleteResponse]
	makeTaskIncomplete *connect.Client[v1.MakeTaskIncompleteRequest, v1.MakeTaskIncompleteResponse]
	deleteTask         *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
}

// Ping calls app.v1.AppService.Ping.
func (c *appServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// CreateTask calls app.v1.AppService.CreateTask.
func (c *appServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls app.v1.AppService.GetTask.
func (c *appServiceClient) GetTask(ctx context.Context, req *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// ListTasks calls app.v1.AppService.ListTasks.
func (c *appServiceClient) ListTasks(ctx context.Context, req *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return c.listTasks.CallUnary(ctx, req)
}

// UpdateTask calls app.v1.AppService.UpdateTask.
func (c *appServiceClient) UpdateTask(ctx context.Context, req *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return c.updateTask.CallUnary(ctx, req)
}

// MakeTaskComplete calls app.v1.AppService.MakeTaskComplete.
func (c *appServiceClient) MakeTaskComplete(ctx context.Context, req *connect.Request[v1.MakeTaskCompleteRequest]) (*connect.Response[v1.MakeTaskCompleteResponse], error) {
	return c.makeTaskComplete.CallUnary(ctx, req)
}

// MakeTaskIncomplete calls app.v1.AppService.MakeTaskIncomplete.
func (c *appServiceClient) MakeTaskIncomplete(ctx context.Context, req *connect.Request[v1.MakeTaskIncompleteRequest]) (*connect.Response[v1.MakeTaskIncompleteResponse], error) {
	return c.makeTaskIncomplete.CallUnary(ctx, req)
}

// DeleteTask calls app.v1.AppService.DeleteTask.
func (c *appServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// AppServiceHandler is an implementation of the app.v1.AppService service.
type AppServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error)
	ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error)
	UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error)
	MakeTaskComplete(context.Context, *connect.Request[v1.MakeTaskCompleteRequest]) (*connect.Response[v1.MakeTaskCompleteResponse], error)
	MakeTaskIncomplete(context.Context, *connect.Request[v1.MakeTaskIncompleteRequest]) (*connect.Response[v1.MakeTaskIncompleteResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
}

// NewAppServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppServiceHandler(svc AppServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appServicePingHandler := connect.NewUnaryHandler(
		AppServicePingProcedure,
		svc.Ping,
		opts...,
	)
	appServiceCreateTaskHandler := connect.NewUnaryHandler(
		AppServiceCreateTaskProcedure,
		svc.CreateTask,
		opts...,
	)
	appServiceGetTaskHandler := connect.NewUnaryHandler(
		AppServiceGetTaskProcedure,
		svc.GetTask,
		opts...,
	)
	appServiceListTasksHandler := connect.NewUnaryHandler(
		AppServiceListTasksProcedure,
		svc.ListTasks,
		opts...,
	)
	appServiceUpdateTaskHandler := connect.NewUnaryHandler(
		AppServiceUpdateTaskProcedure,
		svc.UpdateTask,
		opts...,
	)
	appServiceMakeTaskCompleteHandler := connect.NewUnaryHandler(
		AppServiceMakeTaskCompleteProcedure,
		svc.MakeTaskComplete,
		opts...,
	)
	appServiceMakeTaskIncompleteHandler := connect.NewUnaryHandler(
		AppServiceMakeTaskIncompleteProcedure,
		svc.MakeTaskIncomplete,
		opts...,
	)
	appServiceDeleteTaskHandler := connect.NewUnaryHandler(
		AppServiceDeleteTaskProcedure,
		svc.DeleteTask,
		opts...,
	)
	return "/app.v1.AppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppServicePingProcedure:
			appServicePingHandler.ServeHTTP(w, r)
		case AppServiceCreateTaskProcedure:
			appServiceCreateTaskHandler.ServeHTTP(w, r)
		case AppServiceGetTaskProcedure:
			appServiceGetTaskHandler.ServeHTTP(w, r)
		case AppServiceListTasksProcedure:
			appServiceListTasksHandler.ServeHTTP(w, r)
		case AppServiceUpdateTaskProcedure:
			appServiceUpdateTaskHandler.ServeHTTP(w, r)
		case AppServiceMakeTaskCompleteProcedure:
			appServiceMakeTaskCompleteHandler.ServeHTTP(w, r)
		case AppServiceMakeTaskIncompleteProcedure:
			appServiceMakeTaskIncompleteHandler.ServeHTTP(w, r)
		case AppServiceDeleteTaskProcedure:
			appServiceDeleteTaskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppServiceHandler struct{}

func (UnimplementedAppServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.Ping is not implemented"))
}

func (UnimplementedAppServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.CreateTask is not implemented"))
}

func (UnimplementedAppServiceHandler) GetTask(context.Context, *connect.Request[v1.GetTaskRequest]) (*connect.Response[v1.GetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.GetTask is not implemented"))
}

func (UnimplementedAppServiceHandler) ListTasks(context.Context, *connect.Request[v1.ListTasksRequest]) (*connect.Response[v1.ListTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.ListTasks is not implemented"))
}

func (UnimplementedAppServiceHandler) UpdateTask(context.Context, *connect.Request[v1.UpdateTaskRequest]) (*connect.Response[v1.UpdateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.UpdateTask is not implemented"))
}

func (UnimplementedAppServiceHandler) MakeTaskComplete(context.Context, *connect.Request[v1.MakeTaskCompleteRequest]) (*connect.Response[v1.MakeTaskCompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.MakeTaskComplete is not implemented"))
}

func (UnimplementedAppServiceHandler) MakeTaskIncomplete(context.Context, *connect.Request[v1.MakeTaskIncompleteRequest]) (*connect.Response[v1.MakeTaskIncompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.MakeTaskIncomplete is not implemented"))
}

func (UnimplementedAppServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app.v1.AppService.DeleteTask is not implemented"))
}
