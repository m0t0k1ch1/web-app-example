// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/v1/app.proto

package appv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for IsCompleted

	// no validation rules for UpdatedAt

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on TaskServiceCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceCreateRequestMultiError, or nil if none found.
func (m *TaskServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := TaskServiceCreateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskServiceCreateRequestMultiError(errors)
	}

	return nil
}

// TaskServiceCreateRequestMultiError is an error wrapping multiple validation
// errors returned by TaskServiceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceCreateRequestMultiError) AllErrors() []error { return m }

// TaskServiceCreateRequestValidationError is the validation error returned by
// TaskServiceCreateRequest.Validate if the designated constraints aren't met.
type TaskServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceCreateRequestValidationError) ErrorName() string {
	return "TaskServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceCreateRequestValidationError{}

// Validate checks the field values on TaskServiceCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceCreateResponseMultiError, or nil if none found.
func (m *TaskServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskServiceCreateResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskServiceCreateResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceCreateResponseValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskServiceCreateResponseMultiError(errors)
	}

	return nil
}

// TaskServiceCreateResponseMultiError is an error wrapping multiple validation
// errors returned by TaskServiceCreateResponse.ValidateAll() if the
// designated constraints aren't met.
type TaskServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceCreateResponseMultiError) AllErrors() []error { return m }

// TaskServiceCreateResponseValidationError is the validation error returned by
// TaskServiceCreateResponse.Validate if the designated constraints aren't met.
type TaskServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceCreateResponseValidationError) ErrorName() string {
	return "TaskServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceCreateResponseValidationError{}

// Validate checks the field values on TaskServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceGetRequestMultiError, or nil if none found.
func (m *TaskServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := TaskServiceGetRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskServiceGetRequestMultiError(errors)
	}

	return nil
}

// TaskServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by TaskServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceGetRequestMultiError) AllErrors() []error { return m }

// TaskServiceGetRequestValidationError is the validation error returned by
// TaskServiceGetRequest.Validate if the designated constraints aren't met.
type TaskServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetRequestValidationError) ErrorName() string {
	return "TaskServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetRequestValidationError{}

// Validate checks the field values on TaskServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceGetResponseMultiError, or nil if none found.
func (m *TaskServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskServiceGetResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskServiceGetResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceGetResponseValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskServiceGetResponseMultiError(errors)
	}

	return nil
}

// TaskServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by TaskServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceGetResponseMultiError) AllErrors() []error { return m }

// TaskServiceGetResponseValidationError is the validation error returned by
// TaskServiceGetResponse.Validate if the designated constraints aren't met.
type TaskServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceGetResponseValidationError) ErrorName() string {
	return "TaskServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceGetResponseValidationError{}

// Validate checks the field values on TaskServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceListRequestMultiError, or nil if none found.
func (m *TaskServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TaskServiceListRequestMultiError(errors)
	}

	return nil
}

// TaskServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by TaskServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceListRequestMultiError) AllErrors() []error { return m }

// TaskServiceListRequestValidationError is the validation error returned by
// TaskServiceListRequest.Validate if the designated constraints aren't met.
type TaskServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceListRequestValidationError) ErrorName() string {
	return "TaskServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceListRequestValidationError{}

// Validate checks the field values on TaskServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceListResponseMultiError, or nil if none found.
func (m *TaskServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskServiceListResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskServiceListResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskServiceListResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskServiceListResponseMultiError(errors)
	}

	return nil
}

// TaskServiceListResponseMultiError is an error wrapping multiple validation
// errors returned by TaskServiceListResponse.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceListResponseMultiError) AllErrors() []error { return m }

// TaskServiceListResponseValidationError is the validation error returned by
// TaskServiceListResponse.Validate if the designated constraints aren't met.
type TaskServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceListResponseValidationError) ErrorName() string {
	return "TaskServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceListResponseValidationError{}

// Validate checks the field values on TaskServiceUpdateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceUpdateRequestMultiError, or nil if none found.
func (m *TaskServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := TaskServiceUpdateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := TaskServiceUpdateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsCompleted

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskServiceUpdateRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskServiceUpdateRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceUpdateRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// TaskServiceUpdateRequestMultiError is an error wrapping multiple validation
// errors returned by TaskServiceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceUpdateRequestMultiError) AllErrors() []error { return m }

// TaskServiceUpdateRequestValidationError is the validation error returned by
// TaskServiceUpdateRequest.Validate if the designated constraints aren't met.
type TaskServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceUpdateRequestValidationError) ErrorName() string {
	return "TaskServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceUpdateRequestValidationError{}

// Validate checks the field values on TaskServiceUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceUpdateResponseMultiError, or nil if none found.
func (m *TaskServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskServiceUpdateResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskServiceUpdateResponseValidationError{
					field:  "Task",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskServiceUpdateResponseValidationError{
				field:  "Task",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// TaskServiceUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by TaskServiceUpdateResponse.ValidateAll() if the
// designated constraints aren't met.
type TaskServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceUpdateResponseMultiError) AllErrors() []error { return m }

// TaskServiceUpdateResponseValidationError is the validation error returned by
// TaskServiceUpdateResponse.Validate if the designated constraints aren't met.
type TaskServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceUpdateResponseValidationError) ErrorName() string {
	return "TaskServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceUpdateResponseValidationError{}

// Validate checks the field values on TaskServiceDeleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceDeleteRequestMultiError, or nil if none found.
func (m *TaskServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := TaskServiceDeleteRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// TaskServiceDeleteRequestMultiError is an error wrapping multiple validation
// errors returned by TaskServiceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceDeleteRequestMultiError) AllErrors() []error { return m }

// TaskServiceDeleteRequestValidationError is the validation error returned by
// TaskServiceDeleteRequest.Validate if the designated constraints aren't met.
type TaskServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceDeleteRequestValidationError) ErrorName() string {
	return "TaskServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceDeleteRequestValidationError{}

// Validate checks the field values on TaskServiceDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskServiceDeleteResponseMultiError, or nil if none found.
func (m *TaskServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TaskServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// TaskServiceDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by TaskServiceDeleteResponse.ValidateAll() if the
// designated constraints aren't met.
type TaskServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskServiceDeleteResponseMultiError) AllErrors() []error { return m }

// TaskServiceDeleteResponseValidationError is the validation error returned by
// TaskServiceDeleteResponse.Validate if the designated constraints aren't met.
type TaskServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskServiceDeleteResponseValidationError) ErrorName() string {
	return "TaskServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskServiceDeleteResponseValidationError{}
